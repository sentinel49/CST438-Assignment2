package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.EnrollmentDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class StudentController {

   @Autowired
   EnrollmentRepository enrollmentRepository;

   @Autowired
   UserRepository userRepository;

   @Autowired
   SectionRepository sectionRepository;


   // student gets transcript showing list of all enrollments
   // studentId will be temporary until Login security is implemented
   //example URL  /transcript?studentId=19803
   @GetMapping("/transcripts")
   public List<EnrollmentDTO> getTranscript(@RequestParam("studentId") int studentId) {
     // list course_id, sec_id, title, credit, grade in chronological order
     // TODO user must be a student
     // hint: use enrollment repository method findEnrollmentByStudentIdOrderByTermId
     // remove the following line when done

     List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsByStudentIdOrderByTermId(studentId);
     List<EnrollmentDTO> eDTOs = new ArrayList<>();

     for (Enrollment e : enrollments) {
       eDTOs.add(new EnrollmentDTO(
           e.getEnrollmentId(),
           e.getGrade(),
           e.getUser().getId(),
           e.getUser().getName(),
           e.getUser().getEmail(),
           e.getSection().getCourse().getCourseId(),
           e.getSection().getCourse().getTitle(),
           e.getSection().getSecId(),
           e.getSection().getSectionNo(),
           e.getSection().getBuilding(),
           e.getSection().getRoom(),
           e.getSection().getTimes(),
           e.getSection().getCourse().getCredits(),
           e.getSection().getTerm().getYear(),
           e.getSection().getTerm().getSemester()
       ));
     }

     return eDTOs;
   }

    // student gets a list of their enrollments for the given year, semester
    // TODO user must be student
    // studentId will be temporary until Login security is implemented
   @GetMapping("/enrollments")
   public List<EnrollmentDTO> getSchedule(
           @RequestParam("year") int year,
           @RequestParam("semester") String semester,
           @RequestParam("studentId") int studentId) {


     List<Enrollment> enrollments = enrollmentRepository.findByYearAndSemesterOrderByCourseId(year, semester, studentId);
     List<EnrollmentDTO> eDTOs = new ArrayList<>();

     for (Enrollment e : enrollments) {
       eDTOs.add(new EnrollmentDTO(
           e.getEnrollmentId(),
           e.getGrade(),
           e.getUser().getId(),
           e.getUser().getName(),
           e.getUser().getEmail(),
           e.getSection().getCourse().getCourseId(),
           e.getSection().getCourse().getTitle(),
           e.getSection().getSecId(),
           e.getSection().getSectionNo(),
           e.getSection().getBuilding(),
           e.getSection().getRoom(),
           e.getSection().getTimes(),
           e.getSection().getCourse().getCredits(),
           e.getSection().getTerm().getYear(),
           e.getSection().getTerm().getSemester()
       ));
     }

     return eDTOs;
	   //  hint: use enrollment repository method findByYearAndSemesterOrderByCourseId
     //  remove the following line when done
   }


    // student adds enrollment into a section
    // TODO user must be student
    // return EnrollmentDTO with enrollmentId generated by database
    @PostMapping("/enrollments/sections/{sectionNo}")
    public EnrollmentDTO addCourse(
		    @PathVariable int sectionNo,
            @RequestParam("studentId") int studentId ) {

        // check that the Section entity with primary key sectionNo exists
        Section section = sectionRepository.findById(sectionNo)
          .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Section not found"));

        // check that today is between addDate and addDeadline for the section
        Date today = new Date();
        if (today.before(section.getTerm().getAddDate()) || today.after(section.getTerm().getAddDeadline())) {
          throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Enrollment period is closed for this section");
        }
        // check that student is not already enrolled into this section
        if (enrollmentRepository.findEnrollmentBySectionNoAndStudentId(sectionNo, studentId) != null) {
          throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Student is already enrolled in this section");
        }
        // create a new enrollment entity and save.  The enrollment grade will
        // be NULL until instructor enters final grades for the course.
        Enrollment enrollment = new Enrollment();
        enrollment.setSection(section);
        User student = userRepository.findById(studentId)
          .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not found"));

        enrollment.setUser(student);

        //save
        enrollmentRepository.save(enrollment);
        // remove the following line when done.
      return new EnrollmentDTO(
          enrollment.getEnrollmentId(),
          enrollment.getGrade(),
          enrollment.getUser().getId(),
          enrollment.getUser().getName(),
          enrollment.getUser().getEmail(),
          enrollment.getSection().getCourse().getCourseId(),
          enrollment.getSection().getCourse().getTitle(),
          enrollment.getSection().getSecId(),
          enrollment.getSection().getSectionNo(),
          enrollment.getSection().getBuilding(),
          enrollment.getSection().getRoom(),
          enrollment.getSection().getTimes(),
          enrollment.getSection().getCourse().getCredits(),
          enrollment.getSection().getTerm().getYear(),
          enrollment.getSection().getTerm().getSemester()
      );

    }

    // student drops a course
    // TODO user must be student
   @DeleteMapping("/enrollments/{enrollmentId}")
   public void dropCourse(@PathVariable("enrollmentId") int enrollmentId) {

     // Fetch the enrollment
     Enrollment enrollment = enrollmentRepository.findById(enrollmentId)
         .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Enrollment not found"));

     // Check if today is not after the dropDeadline for section
     Date today = new Date();
     if (today.after(enrollment.getSection().getTerm().getDropDeadline())) {
       throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Drop period has ended for this section");
     }

     // Delete the enrollment
     enrollmentRepository.delete(enrollment);
   }
}