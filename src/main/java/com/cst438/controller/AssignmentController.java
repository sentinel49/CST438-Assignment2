package com.cst438.controller;

import com.cst438.domain.*;
import com.cst438.dto.AssignmentDTO;
import com.cst438.dto.AssignmentStudentDTO;
import com.cst438.dto.GradeDTO;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;


import java.sql.Date;
import java.util.ArrayList;
import java.util.List;


@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class AssignmentController {


    // instructor lists assignments for a section.  Assignments ordered by due date.
    // logged in user must be the instructor for the section

    @Autowired
    AssignmentRepository assignmentRepository;

    @Autowired
    EnrollmentRepository enrollmentRepository;

    @Autowired
    GradeRepository gradeRepository;


    @GetMapping("/sections/{secNo}/assignments")
    public List<AssignmentDTO> getAssignments(
        @PathVariable("secNo") int secNo) {

        // hint: use the assignment repository method
        //  findBySectionNoOrderByDueDate to return
        //  a list of assignments

        List<Assignment> assignments = assignmentRepository.findBySectionNoOrderByDueDate(secNo);
        List<AssignmentDTO> assignmentDTOs = new ArrayList<>();
        for (Assignment assignment : assignments) {
            assignmentDTOs.add(new AssignmentDTO(
                assignment.getAssignmentId(),
                assignment.getTitle(),
                assignment.getDueDate().toString(),
                assignment.getSection().getCourse().getTitle(),
                assignment.getSection().getSecId(),
                assignment.getSection().getSectionNo()
            ));
        }
        return assignmentDTOs;
    }

    // add assignment
    // user must be instructor of the section
    // return AssignmentDTO with assignmentID generated by database
    @PostMapping("/assignments")
    public AssignmentDTO createAssignment(
        @RequestBody AssignmentDTO dto) {

        // TODO remove the following line when done

        Assignment assignment = new Assignment();
        assignment.setTitle(dto.title());
        assignment.setDueDate(Date.valueOf(dto.dueDate()));
        Section section = new Section();
        Assignment savedAssignment = assignmentRepository.save(assignment);
        return new AssignmentDTO(
            savedAssignment.getAssignmentId(),
            savedAssignment.getTitle(),
            savedAssignment.getDueDate().toString(),
            savedAssignment.getSection().getCourse().getTitle(),
            savedAssignment.getSection().getSecId(),
            savedAssignment.getSection().getSectionNo()
        );
    }

    // update assignment for a section.  Only title and dueDate may be changed.
    // user must be instructor of the section
    // return updated AssignmentDTO
    @PutMapping("/assignments")
    public AssignmentDTO updateAssignment(@RequestBody AssignmentDTO dto) {

        // TODO remove the following line when done

        Assignment existingAssignment = assignmentRepository.findById(dto.id())
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found"));


        existingAssignment.setTitle(dto.title());
        existingAssignment.setDueDate(Date.valueOf(dto.dueDate()));

        Assignment updatedAssignment = assignmentRepository.save(existingAssignment);

        return new AssignmentDTO(
            updatedAssignment.getAssignmentId(),
            updatedAssignment.getTitle(),
            updatedAssignment.getDueDate().toString(),
            updatedAssignment.getSection().getCourse().getTitle(),
            updatedAssignment.getSection().getSecId(),
            updatedAssignment.getSection().getSectionNo()
        );
    }

    // delete assignment for a section
    // logged in user must be instructor of the section
    @DeleteMapping("/assignments/{assignmentId}")
    public void deleteAssignment(@PathVariable("assignmentId") int assignmentId) {

        // TODO
        assignmentRepository.deleteById(assignmentId);
    }

    // instructor gets grades for assignment ordered by student name
    // user must be instructor for the section
    @GetMapping("/assignments/{assignmentId}/grades")
    public List<GradeDTO> getAssignmentGrades(@PathVariable("assignmentId") int assignmentId) {

        // TODO remove the following line when done

        // get the list of enrollments for the section related to this assignment.
        // hint: use te enrollment repository method findEnrollmentsBySectionOrderByStudentName.
        // for each enrollment, get the grade related to the assignment and enrollment
        //   hint: use the gradeRepository findByEnrollmentIdAndAssignmentId method.
        //   if the grade does not exist, create a grade entity and set the score to NULL
        //   and then save the new entity
        List<GradeDTO> gradeDTOs = new ArrayList<>();

        // Find the assignment by its ID
        Assignment assignment = assignmentRepository.findById(assignmentId)
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found"));

        // Get the section ID from the assignment
        int sectionId = assignment.getSection().getSecId();

        // Get the list of enrollments for the section, ordered by student name
        List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsBySectionNoOrderByStudentName(sectionId);

        for (Enrollment enrollment : enrollments) {
            // Find the grade by enrollment ID and assignment ID, or create a new one if it doesn't exist
            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), assignmentId)
                .orElseGet(() -> {
                    Grade newGrade = new Grade();
                    newGrade.setEnrollment(enrollment);
                    newGrade.setAssignment(assignment);
                    newGrade.setScore(null); // Set score to NULL for new grade
                    return gradeRepository.save(newGrade);
                });

            // Create a GradeDTO and add it to the list
            GradeDTO gradeDTO = new GradeDTO(grade.getGradeId(), grade.getScore(), enrollment.getUser().getName());
            gradeDTOs.add(gradeDTO);
        }

        return gradeDTOs;
    }

    // instructor uploads grades for assignment
    // user must be instructor for the section
    @PutMapping("/grades")
    public void updateGrades(@RequestBody List<GradeDTO> dlist) {

        // TODO

        // for each grade in the GradeDTO list, retrieve the grade entity
        // update the score and save the entity

        for (GradeDTO dto : dlist) {
            Grade grade = gradeRepository.findById(dto.gradeId())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Grade not found"));

            grade.setScore(dto.score());

            // Save the updated grade
            gradeRepository.save(grade);
        }

    }



    // student lists their assignments/grades for an enrollment ordered by due date
    // student must be enrolled in the section
    @GetMapping("/assignments")
    public List<AssignmentStudentDTO> getStudentAssignments(
        @RequestParam("studentId") int studentId,
        @RequestParam("year") int year,
        @RequestParam("semester") String semester) {

        // TODO remove the following line when done

        // return a list of assignments and (if they exist) the assignment grade
        //  for all sections that the student is enrolled for the given year and semester
        //  hint: use the assignment repository method findByStudentIdAndYearAndSemesterOrderByDueDate

        List<AssignmentStudentDTO> assignmentDTOs = new ArrayList<>();

        List<Assignment> assignments = assignmentRepository.findByStudentIdAndYearAndSemesterOrderByDueDate(studentId, year, semester);

        for (Assignment assignment : assignments) {
            // Fetch grade for the assignment and student
            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(assignment.getSection().getSectionNo(), assignment.getAssignmentId())
                .orElse(null);

            // Create AssignmentStudentDTO and add to list
            AssignmentStudentDTO assignmentDTO = new AssignmentStudentDTO(
                assignment.getAssignmentId(),
                assignment.getTitle(),
                assignment.getDueDate(),
                (grade != null) ? grade.getScore() : null
            );
            assignmentDTOs.add(assignmentDTO);
        }

        return assignmentDTOs;
    }
}
